{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"For loop <": {
		"prefix": "for;",
		"body": [
			"for (int $1 = 0; $1 < $2; ++$1) {",
			"\t$0",
			"}"
		],
		"description": "Generate a for loop with < matching"
	},

	"If without brackets": {
		"prefix": "if;",
		"body": [
			"if ($1) {",
			"\t$0",
			"}"
		],
		"description": "Generate an if test without brackets"
	},

	"Debug Log": {
		"prefix": "log;",
		"body": ["Debug.Log($0);"],
		"description": "Log regular message to Unity's console"
	},

	"Debug Log Format": {
		"prefix": "logformat;",
		"body": ["Debug.LogFormat(\"$1\", $0);"],
		"description": "Log (formated) regular message to Unity's console"
	},

	"Debug Log Warning": {
		"prefix": "logwarning;",
		"body": ["Debug.LogWarning($0);"],
		"description": "Log warning message to Unity's console"
	},

	"Debug Log Warning Format": {
		"prefix": "logwarningformat;",
		"body": ["Debug.LogWarningFormat(\"$1\", $0);"],
		"description": "Log (formated) warning  message to Unity's console"
	},

	"Debug Log Error": {
		"prefix": "logerror;",
		"body": ["Debug.LogError($0);"],
		"description": "Log error message to Unity's console"
	},

	"Debug Log Error Format": {
		"prefix": "logerrorformat;",
		"body": ["Debug.LogErrorFormat(\"$1\", $0);"],
		"description": "Log (formated) error  message to Unity's console"
	},
}