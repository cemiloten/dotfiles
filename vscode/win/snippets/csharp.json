{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"For loop <": {
		"prefix": ["for", "for;"],
		"body": [ "for (int $1 = 0; $1 < $2; ++$1) {", "\t$0", "}" ],
		"description": "Generate a for loop with < matching"
	},

	"For loop reverse": {
		"prefix": ["forr", "forr;"],
		"body": [ "for (int $1 = $2 - 1; $1 >= 0; --$1) {", "\t$0", "}" ],
		"description": "Generate a for loop with < matching"
	},

  "String Format": {
    "prefix": ["stringformat;"],
    "body": ["string.Format(\"$1\", $0)"],
    "description": "Quick way to create a string with format"
  },

  "New list": {
    "prefix": ["nlist;", "newlist;"],
    "body": ["List<$1> $2 = new List<$1>();"],
    "description": "Quick way to initialize a new list."
  },

	"Unity Debug Log": {
		"prefix": "log;",
		"body": ["Debug.Log($0);"],
		"description": "Log regular message to Unity's console"
	},

	"Unity Debug Log Format": {
		"prefix": "logformat;",
		"body": ["Debug.LogFormat(\"$1\", $0);"],
		"description": "Log (formated) regular message to Unity's console"
	},

	"Unity Debug Log Warning": {
		"prefix": "logwarning;",
		"body": ["Debug.LogWarning($0);"],
		"description": "Log warning message to Unity's console"
	},

	"Unity Debug Log Warning Format": {
		"prefix": "logwarningformat;",
		"body": ["Debug.LogWarningFormat(\"$1\", $0);"],
		"description": "Log (formated) warning  message to Unity's console"
	},

	"Unity Debug Log Error": {
		"prefix": "logerror;",
		"body": ["Debug.LogError($0);"],
		"description": "Log error message to Unity's console"
	},

	"Unity Debug Log Error Format": {
		"prefix": "logerrorformat;",
		"body": ["Debug.LogErrorFormat(\"$1\", $0);"],
		"description": "Log (formated) error  message to Unity's console"
	},

	"C3 Mono Behaviour": {
		"prefix": ["newfilec3monobehaviour"],
		"body": [
			"using System.Collections;",
			"using System.Collections.Generic;",
			"using UnityEngine;",
			"",
			"public class ${TM_FILENAME_BASE} : C3MonoBehaviour",
			"{",
			"  protected override void RegisterCallbacks()",
			"  {",
			"    RegisterCallback<Awake>(OnAwake);",
			"    RegisterCallback<Start>(OnStart);",
			"    RegisterCallback<Update>(OnUpdate);",
			"  }",
			"",
			"  private void OnAwake()",
			"  {",
			"  }",
			"",
			"  private void OnStart()",
			"  {",
			"    $0",
			"  }",
			"",
			"  private void OnUpdate()",
			"  {",
			"  }",
			"}",
		],
		"description": "Use when creating a new C3MonoBehaviour file"
	},

	"Mono Behaviour": {
		"prefix": ["newfilemonobehaviour"],
		"body": [
			"using System.Collections;",
			"using System.Collections.Generic;",
			"using UnityEngine;",
			"",
			"public class ${TM_FILENAME_BASE} : MonoBehaviour {",
			"",
			"    private void Start() {$0}",
			"",
			"    private void Update() {}",
			"}",
		],
		"description": "Use when creating a new C3MonoBehaviour file"
	},

	"If Unity Editor": {
		"prefix": ["ifeditor;", "editor;"],
		"body": [
			"#if UNITY_EDITOR",
			"$0",
			"#endif",
		],
		"description": "Quick way to add editor specific code"
	}

}
